name: PowerShell script
author: Martin Sompek
inputs:
  token:
    description: The GitHub token running the action
    required: false
    default: ${{ github.token }}
  bcVersion:
    description: Specifies the version of the BC System running i.e. 20, 21, 22
    required: true
  onPremInstanceName:
    description: BC Instance to deploy to
    required: true
  appName:
    description: The name of the app to be deployed, uses the name of the repository as app name if github.repository is provided
    required: true
  useBranch:
    description: The branch from which the artifacts should be taken for deployment
    required: true
  syncMode:
    description: Specifies how the database schema for the tenant database is synchronized with the database schema
    required: false
    default: 'Add'
  enableDataLoss: 
    description: Specifies if dataloss should be possible when uninstalling the app
    type: boolean
    required: true
    default: 'false'
  uninstallMode:
    description: Specifies the usage of some optional parameters for the Uninstall-NAVApp cmdlet
    required: false
    default: 'SaveData'
  aadTenantId:
    description: AAD tenant for PublisherAzureActiveDirectoryTenantId publishing option
    required: false

runs:
  using: composite
  steps:
    - name: run
      shell: powershell
      env:
        _token: ${{ inputs.token }}
        _bcVersion: ${{ inputs.bcVersion }}
        _bcInstance: ${{ inputs.onPremInstanceName }}
        _appName:  ${{ inputs.appName }}
        _branch: ${{ inputs.useBranch }}
        _syncMode: ${{ inputs.syncMode }}
        _enableDataLoss:  ${{ inputs.enableDataLoss }}
        _uninstallMode: ${{ inputs.uninstallMode }}
        _aadTenantId:  ${{ inputs.aadTenantId }}
      run: try { ${{ github.action_path }}/DeployToOnPrem.ps1 -BCVersion "$ENV:_bcVersion" -BCInstance "$ENV:_bcInstance" -appName "$ENV:_appName" -token "$ENV:_token" -branch "$ENV:_branch" -syncMode "$ENV:_syncMode" -enableDataLoss "$ENV:_enableDataLoss" -uninstallMode "$ENV:_uninstallMode" -aadTenantId "$ENV:_aadTenantId"} catch { Write-Host "::Error::Unexpected error when running action ($($_.Exception.Message.Replace("`r",'').Replace("`n",' ')))"; exit 1 }
